// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum AppointmentStatus {
  REQUESTED
  ACCEPTED
  DECLINED
  RESCHEDULED
  COMPLETED
  CANCELLED
}

enum AppointmentType {
  REGULAR
  EMERGENCY
}

enum ConsultationDuration {
  MINUTES_10
  MINUTES_30
  HOURS_1
  HOURS_2
}

enum MessageStatus {
  SENT
  READ
}

enum WarningType {
  LATE_CANCELLATION
  NO_SHOW
  MISCONDUCT
}

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  password            String
  name                String
  phone               String?
  avatar              String?
  role                UserRole
  isVerified          Boolean           @default(false)
  verificationStatus  VerificationStatus @default(PENDING)
  verificationDocs    String?           // JSON string array
  accountStatus       String            @default("active") // active, suspended, locked
  warnings            Warning[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  patientProfile      Patient?
  doctorProfile       Doctor?
  medicalRecords      MedicalRecord[]
  appointmentsAsPatient Appointment[] @relation("PatientAppointments")
  appointmentsAsDoctor  Appointment[] @relation("DoctorAppointments")
  sentMessages        Message[]         @relation("SentMessages")
  receivedMessages    Message[]         @relation("ReceivedMessages")
  reviewsAsPatient    Review[]         @relation("PatientReviews")
  reviewsAsDoctor     Review[]         @relation("DoctorReviews")
  payments            Payment[]

  @@map("users")
}

model Patient {
  id                String   @id @default(cuid())
  userId            String   @unique
  dateOfBirth       DateTime?
  gender            String?
  bloodType         String?
  allergies         String?
  medications       String?
  emergencyContact  String?
  emergencyPhone    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patients")
}

model Doctor {
  id                  String   @id @default(cuid())
  userId              String   @unique
  specialty           String
  qualifications      String?  // JSON string array
  experience          Int      // years
  licenseNumber       String
  licenseExpiry       DateTime
  bio                 String?
  consultationFee     Float    // per hour
  location            String?
  languages           String?  // JSON string array
  availability        Availability[]
  rating              Float    @default(0)
  totalConsultations  Int      @default(0)
  isAvailable         Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("doctors")
}

model Availability {
  id        String   @id @default(cuid())
  doctorId  String
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // HH:mm format
  endTime   String   // HH:mm format
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, dayOfWeek, startTime])
  @@map("availabilities")
}

model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  title       String
  description String?
  folder      String?
  documents   String?  // JSON string array of file paths/URLs
  ocrData     String?  // extracted OCR data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient User @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

model Appointment {
  id                String            @id @default(cuid())
  patientId         String
  doctorId          String
  status            AppointmentStatus @default(REQUESTED)
  type              AppointmentType   @default(REGULAR)
  duration          ConsultationDuration
  scheduledAt       DateTime
  illness           String?
  specificNeeds     String?
  questions         String?
  price             Float
  paymentId         String?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  patient User @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  doctor  User @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)
  payment Payment?

  @@map("appointments")
}

model Message {
  id        String       @id @default(cuid())
  senderId  String
  receiverId String
  content   String
  status    MessageStatus @default(SENT)
  createdAt DateTime     @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Review {
  id           String   @id @default(cuid())
  patientId    String
  doctorId     String
  appointmentId String   @unique
  rating       Int      // 1-5
  comment      String?
  createdAt    DateTime @default(now())

  patient User @relation("PatientReviews", fields: [patientId], references: [id], onDelete: Cascade)
  doctor  User @relation("DoctorReviews", fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  appointmentId String   @unique
  amount        Float
  status        String   @default("pending") // pending, completed, refunded
  stripeId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Warning {
  id          String       @id @default(cuid())
  userId      String
  type        WarningType
  reason      String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  expiresAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("warnings")
}